funcionario

{
"Nome":"Jorge",
"Email":"Jorge@gmail.com",
"Telefone":12343453, 
"foto":"afadfdad",
"CPF":12345456,
"Cod_empresa":1,
"Cod_cargo":1, 
"senha":"123abc"
}


produto

{
 "nome":"Prego",
 "valor":30, 
 "quantidade":1,
 "area":20,
 "cod_empr":1,
 "foto":"31dsada"
}


cargo  

{
 "valor":"Salario",
 "nome":"Cod_cargo",
 "ent":"1",
 "tipo":"11000"
}

   const {nome, email, senha, cpf, cod} = req.body;

    try {
        const resultado = await setUser({ nome, email, senha, cpf, cod});
        res.status(201).json({ message: "Usuário criado com sucesso", data: resultado });
    } catch (error) {
        res.status(500).json({ message: "Erro ao criar usuário", error: error.message });
    }



      try {
      const resultado = await setUser({ nome, email, senha, cpf, cod});
      res.status(201).json({ message: "Usuário criado com sucesso", data: resultado });
  } catch (error) {
      res.status(500).json({ message: "Erro ao criar usuário", error: error.message });
  }


  ensinamentos dessa cosia:

  1- verificar as extensões(.js)
  2- verificar se é objeto array ou unico
  3- verificar o tipo da variável, sempre manda em String(Number() pra converter)
  4- Para pegar o retorno de uma função armazene ela dentro de uma variável
  5- Caso precise pegar só o valor de um comando mysql salve-o como array e acesse a posição 0
  6- Eu tinha descobri o 5 denovo... mais ou menos assim [0][e agora sim onde].atributo
     *eu não sei por que mas ele coloca os valores pegos do Banco de dados e o coloca dentro de 2 arrays, acho que é porque
     ele pega todos os valores do banco coloca dentro de um array e depois pega o objeto individualmente e coloca dentro de outro tipo assim
     [ [{valor1}], [{valor2}], [{valor3}]]
7-não esquecer de instalar o ejs, ele serve para integrar o node com o html
8- VERIFICA COMO TA ENVIANDO SE É ARRAY OBJ OU QUE COISA QUE funcionario
9-FINALMENTE entendi a diferença entre const e let, const basicamente torna a função constante, ou seja ela basicamente existe pensa em algo
que é verdadeiro, ou seja, quando eu declarar uma função em uma variável const ela ja vai ser chamada(verdadeira), se eu colocar como let pensa como se
foçe algo que precisa ser comprovado, então se eu declaro uma função do tipo let(ou var) ela precisa ser chamada(comprovada) depois no código. 